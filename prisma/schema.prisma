// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String       @id @unique @default(uuid())
  createdAt    DateTime     @default(now())
  companyName  String?      @unique @db.VarChar(255)
  companyEmail String       @unique
  password     String?
  hasPassword  Boolean      @default(false)
  outlets      Outlet[]
  staffs       Staff[]
  logo         String?      @db.VarChar(255)
  oAuthTokens  OAuthToken[]
  queues       Queue[]
  slug         String       @unique @db.VarChar(255)
  customers    Customer[]

  @@index([slug])
}

model Staff {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  role       Role       @default(HOST)
  createdAt  DateTime   @default(now())
  account    Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String
  email      String?    @unique @db.VarChar(255)
  pfp        String?    @db.VarChar(255) //Profile picture stored in cloudinary. Rmb to limit the size.
  googleId   String?
  facebookId String?
  password   String?
  auditLogs  AuditLog[]

  @@index([accountId])
  @@index([name])
}

enum Role {
  OWNER
  MANAGER
  ASSISTANT_MANAGER
  HOST
  SERVER
  CASHIER
  BARISTA
  // Add other relevant staff roles as needed
}

model OAuthToken {
  id           String    @id @default(uuid())
  provider     Provider // "google" or "github"
  accessToken  String
  refreshToken String?
  accountId    String
  account      Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userAgent    String    @default("UNKNOWN") //This is what device: User-Agent: Mozilla/5.0 (<system-information>) <platform> (<platform-details>) <extensions>
  deviceName   String?
  lastLoggedIn DateTime?

  @@unique([id, accountId]) // Prevent multiple tokens per provider per user
}

enum Provider {
  LOCAL
  GOOGLE
  GITHUB
  FACEBOOK
}

model Outlet {
  id                 Int     @id @unique @default(autoincrement())
  name               String? @db.VarChar(255)
  account            Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId          String
  queues             Queue[]
  location           String? @db.VarChar(255)
  googleMaps         String? @db.VarChar(255)
  wazeMaps           String? @db.VarChar(255)
  imgUrl             String? @db.VarChar(255) //Image stored in cloudinary
  defaultEstWaitTime Int?
  phone              String? @db.VarChar(36)
  hours              String?

  @@index([accountId])
}

model Queue {
  id         String      @id @unique @default(uuid())
  outlet     Outlet      @relation(fields: [outletId], references: [id])
  outletId   Int
  queueItems QueueItem[]
  startTime  DateTime    @default(now())
  endTime    DateTime?
  active     Boolean     @default(true)
  name       String?
  account    Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String

  //We need to show active items and non active items. 
  //If Queueitem is inactive, then the data moves to a different array.
  @@index([outletId])
  @@index([accountId])
}

model Customer {
  id         String      @id @unique @default(uuid())
  name       String?     @db.VarChar(255)
  number     String?     @unique @db.VarChar(25)
  VIP        Boolean     @default(true)
  //If VIP is false, then after every 7 days, we delete number in Customer file. 
  //But the Customer with name exist and remains so that we can use it for metrics.
  queueItems QueueItem[] @relation("CustomerQueueItem")
  account    Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String
}

model QueueItem {
  id         String    @id @unique @default(uuid())
  queue      Queue     @relation(fields: [queueId], references: [id])
  queueId    String
  customerId String?
  customer   Customer? @relation("CustomerQueueItem", fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  pax        Int
  called     Boolean   @default(false)
  calledAt   DateTime?
  seated     Boolean   @default(false)
  quit       Boolean   @default(false)
  noShow     Boolean   @default(false)
  active     Boolean   @default(true)
  position   Int
  inactiveAt DateTime?
  //! @@check([seated != quit], name: "seated_quit_check")
  // Ensure seated and quit cannot both be true
  //If called is true, but seated is not. Start a wait timer. 
  //Once it hits 30 minutes, prompt the host if this user has been seated or to kick the user out of the queue.
  //If kick user out of queue quit becomes true. If user selects to leave queue, quit is also true.
  //If quit is true, seated cannot be true. If seated is true, quit cannot be true.
  //If quit or seated is true, active becomes false.
  //When seated is true, queue item becomes dormant (gray out) and leaves the actual queue.

  @@index([queueId]) // For efficient querying of queue items within a queue
  @@index([position])
}

model AuditLog {
  id         String   @id @default(uuid())
  staffId    Int
  staff      Staff    @relation(fields: [staffId], references: [id])
  actionType String
  timestamp  DateTime @default(now())

  @@index([staffId])
  @@index([actionType])
}
